/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package chatbot;

import java.awt.Color;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

/**
 *
 * @author USER
 */
public class Chatframe extends javax.swing.JFrame {
    private final ArrayList<ArrayList<String>> historialConversaciones = new ArrayList<>();
    private ArrayList<String> conversacionActual = new ArrayList<>();
    /**
     * Creates new form Chatframe
     */
    
    public Chatframe() {
        setIconImage(new ImageIcon(getClass().getResource("llama.png")).getImage());
        initComponents();
        
        setTitle("Chatbot - Ollama API");
        setSize(700, 700);
        setDefaultCloseOperation(Chatframe.EXIT_ON_CLOSE); 
        setLocationRelativeTo(null); 
        getContentPane().setBackground(new Color(204, 204, 255));
        jTextArea1.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        jTextArea1.setLineWrap(true);
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setEditable(false);
        Input.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        Input.setBounds(20, 540, 400, 40);
        jButton1.setFont(new Font("Segoe UI", Font.BOLD, 14));
        jButton1.setBackground(new Color(60, 179, 113));
        jButton1.setForeground(Color.WHITE);
        jButton1.setBounds(440, 540, 100, 40);
        botonhistorial.setFont(new Font("Segoe UI", Font.BOLD, 14));
        botonhistorial.setBackground(new Color(100, 149, 237));
        botonhistorial.setForeground(Color.WHITE);
        botonhistorial.setBounds(550, 540, 100, 40);
        botonLimpiar.setFont(new Font("Segoe UI", Font.BOLD, 14));
        botonLimpiar.setBackground(new Color(220, 20, 60));
        botonLimpiar.setForeground(Color.WHITE);
        botonLimpiar.setBounds(550, 590, 100, 40);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        Input = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollBar1 = new javax.swing.JScrollBar();
        label1 = new java.awt.Label();
        botonhistorial = new javax.swing.JButton();
        botonLimpiar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        Input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chatbot/Send.png"))); // NOI18N
        jButton1.setText("ENVIAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        label1.setBackground(new java.awt.Color(204, 204, 255));
        label1.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        label1.setText("CHAT BOT OLLAMA");

        botonhistorial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chatbot/Historial.png"))); // NOI18N
        botonhistorial.setText("HISTORIAL");
        botonhistorial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonhistorialMouseClicked(evt);
            }
        });
        botonhistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonhistorialActionPerformed(evt);
            }
        });

        botonLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chatbot/broom.png"))); // NOI18N
        botonLimpiar.setText("Limpiar Chat");
        botonLimpiar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonLimpiarMouseClicked(evt);
            }
        });
        botonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Input, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(botonhistorial, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(botonLimpiar)))
                .addGap(14, 14, 14))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(175, 175, 175))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Input, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonhistorial, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        enviarPregunta();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void InputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputActionPerformed
        enviarPregunta();
    }//GEN-LAST:event_InputActionPerformed

    private void botonhistorialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonhistorialMouseClicked
        mostrarVentanaHistorial();
    }//GEN-LAST:event_botonhistorialMouseClicked

    private void botonLimpiarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonLimpiarMouseClicked
        if (!conversacionActual.isEmpty()) {
            historialConversaciones.add(conversacionActual);
            conversacionActual = new ArrayList<>(); // Inicia una nueva conversaci√≥n
        }
        jTextArea1.setText("");
    }//GEN-LAST:event_botonLimpiarMouseClicked

    private void botonhistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonhistorialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botonhistorialActionPerformed

    private void botonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLimpiarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botonLimpiarActionPerformed
    private void enviarPregunta() {
        String user = Input.getText();
        if (!user.trim().isEmpty()) {
            String mensajeUsuario = "\n USER : " + user + "\n";
            jTextArea1.append(mensajeUsuario);
            Input.setText("");

            try {
                String response = callOllama(user);
                String mensajeBot = "BOT : " + response;
                jTextArea1.append(mensajeBot + "\n");
                conversacionActual.add(mensajeUsuario + mensajeBot);
            } catch (IOException e) {
                manejarError("Error al conectarse con la API de Ollama.");
            }
        }
    }
    private void mostrarVentanaHistorial(){
        JFrame ventanaHistorial = new JFrame("Historial de Conversaci√≥n");
        ventanaHistorial.setSize(400, 400);
        ventanaHistorial.setLocationRelativeTo(this);

        JTextArea areaHistorial = new JTextArea();
        areaHistorial.setLineWrap(true);
        areaHistorial.setWrapStyleWord(true);
        areaHistorial.setEditable(false);

        for (int i = 0; i < historialConversaciones.size(); i++) {
            areaHistorial.append("Conversaci√≥n " + (i + 1) + ":\n");
            for (String mensaje : historialConversaciones.get(i)) {
                if (mensaje.startsWith("User:")) {
                    areaHistorial.append("Usuario: " + mensaje.replace("User: ", "") + "\n");
                } else if (mensaje.startsWith("Bot:")) {
                    areaHistorial.append("Chatbot: " + mensaje.replace("Bot: ", "") + "\n");
                }
            }
            areaHistorial.append("\n---\n"); // Separador entre conversaciones
        }

        JScrollPane scrollPane = new JScrollPane(areaHistorial);
        ventanaHistorial.add(scrollPane);
        ventanaHistorial.setVisible(true);
    
    }
    private String callOllama(String prompt) throws IOException{
        URL url = new URL("http://localhost:11434/api/generate");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Content-Type", "application/json; utf-8");
        connection.setRequestProperty("Accept", "application/json");
        connection.setDoOutput(true);
        
        String jsonInputString = "{\"model\": \"gemma2:2b\", \"prompt\": \"" + prompt + "\"}";
        try (OutputStream os = connection.getOutputStream()) {
            byte[] input = jsonInputString.getBytes("utf-8");
            os.write(input, 0, input.length);
        }

        StringBuilder response = new StringBuilder();
        try (BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), "utf-8"))) {
            String responseLine;
            while ((responseLine = br.readLine()) != null) {
                response.append(processJsonResponse(responseLine));
            }
            return response.toString();
        }
    }
    private void manejarError(String mensajeError) {
        jTextArea1.append("Error: " + mensajeError + "\n");
        JOptionPane.showMessageDialog(this, mensajeError, "Error", JOptionPane.ERROR_MESSAGE);
    }

private String processJsonResponse(String json) {
    if (json.contains("response")) {
        int responseStartIndex = json.indexOf("response") + 11; 
        int responseEndIndex = json.indexOf("\"", responseStartIndex);
        
        if (responseStartIndex >= 0 && responseEndIndex > responseStartIndex) {
            String responsePart = json.substring(responseStartIndex, responseEndIndex);
            responsePart = responsePart.replace("\\n", " ");
            System.out.println("Respuesta obtenida: " + responsePart);
            return responsePart; 
        }
    }
    return ""; 
} 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chatframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chatframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chatframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chatframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chatframe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Input;
    private javax.swing.JButton botonLimpiar;
    private javax.swing.JButton botonhistorial;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private java.awt.Label label1;
    // End of variables declaration//GEN-END:variables

}
